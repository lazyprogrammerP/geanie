// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AgentSourceType {
  URL // Scrape
  PDF // GPT Vision
  DOCX
  TXT
  JPEG // GPT Vision
  PNG // GPT Vision
}

enum TaskType {
  EXTRACT
  CLASSIFY
  GENERATE
}

enum TaskDataType {
  NUMBER
  TEXT
  BOOLEAN
  LIST
}

model User {
  id String @id @default(cuid())

  name  String
  email String @unique

  passwordHash String

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(cuid())

  name        String @unique
  description String

  agents    Agent[]
  workflows Workflow[]

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workflow {
  id String @id @default(cuid())

  name        String
  description String

  workflowItems Json

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, name])
}

model Agent {
  id String @id @default(cuid())

  name String

  sourceType AgentSourceType
  tasks      Task[]

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, name])
}

model Task {
  id String @id @default(cuid())

  key String

  dataType TaskDataType

  type        TaskType
  instruction String

  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agentId, key])
}
